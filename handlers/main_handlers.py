import os

from dotenv import load_dotenv
from aiogram import F, Router
from aiogram.types import Message, PollAnswer, ReplyKeyboardRemove
from aiogram.filters import CommandStart

import keyboards.main_keyboard as kb
from keyboards.inline_maps_button import inline_keyboard_with_map
from messages.date_time_messages import message_for_group_about_training, input_training_time
from messages.participant_messages import caption_of_pay_photo
from states.main_states import WAITING_FOR_DATE, WAITING_FOR_PARTICIPANTS, user_state, WAITING_FOR_TIME
from constants.main_constants import GROUP_CHAT_ID, TOTAL_AMOUNT, VOTES
from teams.team_utils import divide_into_teams
from validators.validators import ValidationError, validate_participants, validate_time_range, validate_date

router = Router()
load_dotenv()
ALLOWED_USERS = list(map(int, os.getenv("ALLOWED_USERS", "").split(",")))


@router.message(F.text == "–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å")
async def send_poll(message: Message):
    question = "–ò–¥–µ—à—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?"
    options = ["–î–∞ ‚úÖ", "–ù–µ –∑–Ω–∞—é ü§∑üèª", "–ù–µ—Ç ‚ùå"]
    is_anonymous = False

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É
    poll_message = await message.bot.send_poll(
        chat_id=GROUP_CHAT_ID,
        question=question,
        options=options,
        is_anonymous=is_anonymous
    )

    poll_id = poll_message.poll.id
    await message.bot.send_message(
        chat_id=message.chat.id,
        text=f"–û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ï–≥–æ ID {poll_id}",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(F.text == "–ü–æ—Å–ª–∞—Ç—å QR –∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å –æ–ø–ª–∞—Ç—É")
async def ask_for_participants(message: Message):
    user_state[message.from_user.id] = {"state": WAITING_FOR_PARTICIPANTS}
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(F.text == "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def ask_for_date(message: Message):
    user_state[message.from_user.id] = {"state": WAITING_FOR_DATE}
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(F.text == "–†–∞–∑–¥–µ–ª–∏—Ç—å –≤—Å–µ—Ö –Ω–∞ –∫–æ–º–∞–Ω–¥—ã")
async def divide_players_into_teams(message: Message):
    players = list(VOTES)
    if not players:
        await message.answer("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥!")
        return

    teams = divide_into_teams(players, team_size=5)
    final_team_list = "\n\n".join(
        [f"–ö–æ–º–∞–Ω–¥–∞ {i + 1}: " + ", ".join(team) for i, team in enumerate(teams)]
    )

    await message.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text=f"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n{final_team_list}"
    )
    await message.answer("–ò–≥—Ä–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—ã!")


@router.message(F.text == "–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é")
async def close_main_menu(message: Message):
    await message.answer(
        text="–í—ã –∑–∞–∫—Ä—ã–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(CommandStart())
async def cmd_start(message: Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await message.answer(
        text="–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é",
        reply_markup=kb.main
    )


@router.poll_answer()
async def handle_poll_answer(poll_answer: PollAnswer):
    user = poll_answer.user
    username = user.username or user.first_name
    options_ids = poll_answer.option_ids

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "–î–∞ ‚úÖ"
    if 0 in options_ids:
        VOTES.add(username)
    else:
        VOTES.discard(username)

    # Just for debug! Not for production
    print(VOTES)


@router.message(F.text)
async def handle_input(message: Message):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    current_state = user_state.get(user_id, {})

    if current_state.get("state") == WAITING_FOR_DATE:
        try:
            date = validate_date(message.text)
            user_state[user_id] = {"state": WAITING_FOR_TIME, "date": date}

            await message.answer(input_training_time)
        except ValidationError as e:
            await message.answer(str(e))

    elif current_state.get("state") == WAITING_FOR_TIME:
        try:
            time_input = message.text
            start_time, end_time = validate_time_range(time_input)
            date_obj = current_state.get("date")

            if not date_obj:
                raise ValidationError("–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            group_message = message_for_group_about_training.format(
                date=date_obj.strftime('%d.%m.%Y'),
                start_time=start_time.strftime('%H:%M'),
                end_time=end_time.strftime('%H:%M')
            )

            await message.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=group_message,
                reply_markup=inline_keyboard_with_map
            )

            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")
            user_state.pop(user_id, None)
        except ValidationError as e:
            await message.answer(str(e))

    elif current_state.get("state") == WAITING_FOR_PARTICIPANTS:
        try:
            participants = validate_participants(message.text)
            amount_per_person = TOTAL_AMOUNT / participants

            await message.bot.send_photo(
                chat_id=GROUP_CHAT_ID,
                photo="https://i.ibb.co/yggZ8jn/IMG-0696.jpg",
                caption=caption_of_pay_photo.format(amount_per_person=round(amount_per_person))
            )

            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º –∏ —Å—É–º–º–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")
            user_state.pop(user_id, None)
        except ValidationError as e:
            await message.answer(str(e))
